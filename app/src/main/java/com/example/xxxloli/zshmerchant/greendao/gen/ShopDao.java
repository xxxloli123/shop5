package com.example.xxxloli.zshmerchant.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.xxxloli.zshmerchant.greendao.Shop;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHOP".
*/
public class ShopDao extends AbstractDao<Shop, Long> {

    public static final String TABLENAME = "SHOP";

    /**
     * Properties of entity Shop.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property WritId = new Property(0, Long.class, "writId", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property Special = new Property(2, String.class, "special", false, "SPECIAL");
        public final static Property ShopCode = new Property(3, String.class, "shopCode", false, "SHOP_CODE");
        public final static Property CollectMoneyCode = new Property(4, String.class, "collectMoneyCode", false, "COLLECT_MONEY_CODE");
        public final static Property ShopName = new Property(5, String.class, "shopName", false, "SHOP_NAME");
        public final static Property ShopkeeperId = new Property(6, String.class, "shopkeeperId", false, "SHOPKEEPER_ID");
        public final static Property ShopkeeperName = new Property(7, String.class, "shopkeeperName", false, "SHOPKEEPER_NAME");
        public final static Property ShopkeeperPhone = new Property(8, String.class, "shopkeeperPhone", false, "SHOPKEEPER_PHONE");
        public final static Property Othershopnum = new Property(9, String.class, "othershopnum", false, "OTHERSHOPNUM");
        public final static Property Selfproductnum = new Property(10, String.class, "selfproductnum", false, "SELFPRODUCTNUM");
        public final static Property ShopNumber = new Property(11, String.class, "shopNumber", false, "SHOP_NUMBER");
        public final static Property TelePhone = new Property(12, String.class, "telePhone", false, "TELE_PHONE");
        public final static Property ShopImage = new Property(13, String.class, "shopImage", false, "SHOP_IMAGE");
        public final static Property ClassId = new Property(14, String.class, "classId", false, "CLASS_ID");
        public final static Property ClassName = new Property(15, String.class, "className", false, "CLASS_NAME");
        public final static Property StartDate = new Property(16, String.class, "startDate", false, "START_DATE");
        public final static Property EndDate = new Property(17, String.class, "endDate", false, "END_DATE");
        public final static Property Status = new Property(18, String.class, "status", false, "STATUS");
        public final static Property BookingOrder = new Property(19, String.class, "bookingOrder", false, "BOOKING_ORDER");
        public final static Property LineConsume = new Property(20, String.class, "lineConsume", false, "LINE_CONSUME");
        public final static Property TogetherTable = new Property(21, String.class, "togetherTable", false, "TOGETHER_TABLE");
        public final static Property AutoOrder = new Property(22, String.class, "autoOrder", false, "AUTO_ORDER");
        public final static Property Business = new Property(23, String.class, "business", false, "BUSINESS");
        public final static Property AppDisplay = new Property(24, String.class, "appDisplay", false, "APP_DISPLAY");
        public final static Property Cod = new Property(25, String.class, "cod", false, "COD");
        public final static Property Distance = new Property(26, String.class, "distance", false, "DISTANCE");
        public final static Property DeliveryFee = new Property(27, String.class, "deliveryFee", false, "DELIVERY_FEE");
        public final static Property Packingprice = new Property(28, String.class, "packingprice", false, "PACKINGPRICE");
        public final static Property Pro = new Property(29, String.class, "pro", false, "PRO");
        public final static Property City = new Property(30, String.class, "city", false, "CITY");
        public final static Property District = new Property(31, String.class, "district", false, "DISTRICT");
        public final static Property Street = new Property(32, String.class, "street", false, "STREET");
        public final static Property HouseNumber = new Property(33, String.class, "houseNumber", false, "HOUSE_NUMBER");
        public final static Property Lng = new Property(34, double.class, "lng", false, "LNG");
        public final static Property Lat = new Property(35, double.class, "lat", false, "LAT");
        public final static Property RegisterDate = new Property(36, String.class, "registerDate", false, "REGISTER_DATE");
        public final static Property ShopUserDistance = new Property(37, String.class, "shopUserDistance", false, "SHOP_USER_DISTANCE");
        public final static Property ShopNotices = new Property(38, String.class, "shopNotices", false, "SHOP_NOTICES");
        public final static Property ShopTransportArea = new Property(39, String.class, "shopTransportArea", false, "SHOP_TRANSPORT_AREA");
    }


    public ShopDao(DaoConfig config) {
        super(config);
    }
    
    public ShopDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHOP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: writId
                "\"ID\" TEXT," + // 1: id
                "\"SPECIAL\" TEXT," + // 2: special
                "\"SHOP_CODE\" TEXT," + // 3: shopCode
                "\"COLLECT_MONEY_CODE\" TEXT," + // 4: collectMoneyCode
                "\"SHOP_NAME\" TEXT," + // 5: shopName
                "\"SHOPKEEPER_ID\" TEXT," + // 6: shopkeeperId
                "\"SHOPKEEPER_NAME\" TEXT," + // 7: shopkeeperName
                "\"SHOPKEEPER_PHONE\" TEXT," + // 8: shopkeeperPhone
                "\"OTHERSHOPNUM\" TEXT," + // 9: othershopnum
                "\"SELFPRODUCTNUM\" TEXT," + // 10: selfproductnum
                "\"SHOP_NUMBER\" TEXT," + // 11: shopNumber
                "\"TELE_PHONE\" TEXT," + // 12: telePhone
                "\"SHOP_IMAGE\" TEXT," + // 13: shopImage
                "\"CLASS_ID\" TEXT," + // 14: classId
                "\"CLASS_NAME\" TEXT," + // 15: className
                "\"START_DATE\" TEXT," + // 16: startDate
                "\"END_DATE\" TEXT," + // 17: endDate
                "\"STATUS\" TEXT," + // 18: status
                "\"BOOKING_ORDER\" TEXT," + // 19: bookingOrder
                "\"LINE_CONSUME\" TEXT," + // 20: lineConsume
                "\"TOGETHER_TABLE\" TEXT," + // 21: togetherTable
                "\"AUTO_ORDER\" TEXT," + // 22: autoOrder
                "\"BUSINESS\" TEXT," + // 23: business
                "\"APP_DISPLAY\" TEXT," + // 24: appDisplay
                "\"COD\" TEXT," + // 25: cod
                "\"DISTANCE\" TEXT," + // 26: distance
                "\"DELIVERY_FEE\" TEXT," + // 27: deliveryFee
                "\"PACKINGPRICE\" TEXT," + // 28: packingprice
                "\"PRO\" TEXT," + // 29: pro
                "\"CITY\" TEXT," + // 30: city
                "\"DISTRICT\" TEXT," + // 31: district
                "\"STREET\" TEXT," + // 32: street
                "\"HOUSE_NUMBER\" TEXT," + // 33: houseNumber
                "\"LNG\" REAL NOT NULL ," + // 34: lng
                "\"LAT\" REAL NOT NULL ," + // 35: lat
                "\"REGISTER_DATE\" TEXT," + // 36: registerDate
                "\"SHOP_USER_DISTANCE\" TEXT," + // 37: shopUserDistance
                "\"SHOP_NOTICES\" TEXT," + // 38: shopNotices
                "\"SHOP_TRANSPORT_AREA\" TEXT);"); // 39: shopTransportArea
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHOP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Shop entity) {
        stmt.clearBindings();
 
        Long writId = entity.getWritId();
        if (writId != null) {
            stmt.bindLong(1, writId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String special = entity.getSpecial();
        if (special != null) {
            stmt.bindString(3, special);
        }
 
        String shopCode = entity.getShopCode();
        if (shopCode != null) {
            stmt.bindString(4, shopCode);
        }
 
        String collectMoneyCode = entity.getCollectMoneyCode();
        if (collectMoneyCode != null) {
            stmt.bindString(5, collectMoneyCode);
        }
 
        String shopName = entity.getShopName();
        if (shopName != null) {
            stmt.bindString(6, shopName);
        }
 
        String shopkeeperId = entity.getShopkeeperId();
        if (shopkeeperId != null) {
            stmt.bindString(7, shopkeeperId);
        }
 
        String shopkeeperName = entity.getShopkeeperName();
        if (shopkeeperName != null) {
            stmt.bindString(8, shopkeeperName);
        }
 
        String shopkeeperPhone = entity.getShopkeeperPhone();
        if (shopkeeperPhone != null) {
            stmt.bindString(9, shopkeeperPhone);
        }
 
        String othershopnum = entity.getOthershopnum();
        if (othershopnum != null) {
            stmt.bindString(10, othershopnum);
        }
 
        String selfproductnum = entity.getSelfproductnum();
        if (selfproductnum != null) {
            stmt.bindString(11, selfproductnum);
        }
 
        String shopNumber = entity.getShopNumber();
        if (shopNumber != null) {
            stmt.bindString(12, shopNumber);
        }
 
        String telePhone = entity.getTelePhone();
        if (telePhone != null) {
            stmt.bindString(13, telePhone);
        }
 
        String shopImage = entity.getShopImage();
        if (shopImage != null) {
            stmt.bindString(14, shopImage);
        }
 
        String classId = entity.getClassId();
        if (classId != null) {
            stmt.bindString(15, classId);
        }
 
        String className = entity.getClassName();
        if (className != null) {
            stmt.bindString(16, className);
        }
 
        String startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindString(17, startDate);
        }
 
        String endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindString(18, endDate);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(19, status);
        }
 
        String bookingOrder = entity.getBookingOrder();
        if (bookingOrder != null) {
            stmt.bindString(20, bookingOrder);
        }
 
        String lineConsume = entity.getLineConsume();
        if (lineConsume != null) {
            stmt.bindString(21, lineConsume);
        }
 
        String togetherTable = entity.getTogetherTable();
        if (togetherTable != null) {
            stmt.bindString(22, togetherTable);
        }
 
        String autoOrder = entity.getAutoOrder();
        if (autoOrder != null) {
            stmt.bindString(23, autoOrder);
        }
 
        String business = entity.getBusiness();
        if (business != null) {
            stmt.bindString(24, business);
        }
 
        String appDisplay = entity.getAppDisplay();
        if (appDisplay != null) {
            stmt.bindString(25, appDisplay);
        }
 
        String cod = entity.getCod();
        if (cod != null) {
            stmt.bindString(26, cod);
        }
 
        String distance = entity.getDistance();
        if (distance != null) {
            stmt.bindString(27, distance);
        }
 
        String deliveryFee = entity.getDeliveryFee();
        if (deliveryFee != null) {
            stmt.bindString(28, deliveryFee);
        }
 
        String packingprice = entity.getPackingprice();
        if (packingprice != null) {
            stmt.bindString(29, packingprice);
        }
 
        String pro = entity.getPro();
        if (pro != null) {
            stmt.bindString(30, pro);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(31, city);
        }
 
        String district = entity.getDistrict();
        if (district != null) {
            stmt.bindString(32, district);
        }
 
        String street = entity.getStreet();
        if (street != null) {
            stmt.bindString(33, street);
        }
 
        String houseNumber = entity.getHouseNumber();
        if (houseNumber != null) {
            stmt.bindString(34, houseNumber);
        }
        stmt.bindDouble(35, entity.getLng());
        stmt.bindDouble(36, entity.getLat());
 
        String registerDate = entity.getRegisterDate();
        if (registerDate != null) {
            stmt.bindString(37, registerDate);
        }
 
        String shopUserDistance = entity.getShopUserDistance();
        if (shopUserDistance != null) {
            stmt.bindString(38, shopUserDistance);
        }
 
        String shopNotices = entity.getShopNotices();
        if (shopNotices != null) {
            stmt.bindString(39, shopNotices);
        }
 
        String shopTransportArea = entity.getShopTransportArea();
        if (shopTransportArea != null) {
            stmt.bindString(40, shopTransportArea);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Shop entity) {
        stmt.clearBindings();
 
        Long writId = entity.getWritId();
        if (writId != null) {
            stmt.bindLong(1, writId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String special = entity.getSpecial();
        if (special != null) {
            stmt.bindString(3, special);
        }
 
        String shopCode = entity.getShopCode();
        if (shopCode != null) {
            stmt.bindString(4, shopCode);
        }
 
        String collectMoneyCode = entity.getCollectMoneyCode();
        if (collectMoneyCode != null) {
            stmt.bindString(5, collectMoneyCode);
        }
 
        String shopName = entity.getShopName();
        if (shopName != null) {
            stmt.bindString(6, shopName);
        }
 
        String shopkeeperId = entity.getShopkeeperId();
        if (shopkeeperId != null) {
            stmt.bindString(7, shopkeeperId);
        }
 
        String shopkeeperName = entity.getShopkeeperName();
        if (shopkeeperName != null) {
            stmt.bindString(8, shopkeeperName);
        }
 
        String shopkeeperPhone = entity.getShopkeeperPhone();
        if (shopkeeperPhone != null) {
            stmt.bindString(9, shopkeeperPhone);
        }
 
        String othershopnum = entity.getOthershopnum();
        if (othershopnum != null) {
            stmt.bindString(10, othershopnum);
        }
 
        String selfproductnum = entity.getSelfproductnum();
        if (selfproductnum != null) {
            stmt.bindString(11, selfproductnum);
        }
 
        String shopNumber = entity.getShopNumber();
        if (shopNumber != null) {
            stmt.bindString(12, shopNumber);
        }
 
        String telePhone = entity.getTelePhone();
        if (telePhone != null) {
            stmt.bindString(13, telePhone);
        }
 
        String shopImage = entity.getShopImage();
        if (shopImage != null) {
            stmt.bindString(14, shopImage);
        }
 
        String classId = entity.getClassId();
        if (classId != null) {
            stmt.bindString(15, classId);
        }
 
        String className = entity.getClassName();
        if (className != null) {
            stmt.bindString(16, className);
        }
 
        String startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindString(17, startDate);
        }
 
        String endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindString(18, endDate);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(19, status);
        }
 
        String bookingOrder = entity.getBookingOrder();
        if (bookingOrder != null) {
            stmt.bindString(20, bookingOrder);
        }
 
        String lineConsume = entity.getLineConsume();
        if (lineConsume != null) {
            stmt.bindString(21, lineConsume);
        }
 
        String togetherTable = entity.getTogetherTable();
        if (togetherTable != null) {
            stmt.bindString(22, togetherTable);
        }
 
        String autoOrder = entity.getAutoOrder();
        if (autoOrder != null) {
            stmt.bindString(23, autoOrder);
        }
 
        String business = entity.getBusiness();
        if (business != null) {
            stmt.bindString(24, business);
        }
 
        String appDisplay = entity.getAppDisplay();
        if (appDisplay != null) {
            stmt.bindString(25, appDisplay);
        }
 
        String cod = entity.getCod();
        if (cod != null) {
            stmt.bindString(26, cod);
        }
 
        String distance = entity.getDistance();
        if (distance != null) {
            stmt.bindString(27, distance);
        }
 
        String deliveryFee = entity.getDeliveryFee();
        if (deliveryFee != null) {
            stmt.bindString(28, deliveryFee);
        }
 
        String packingprice = entity.getPackingprice();
        if (packingprice != null) {
            stmt.bindString(29, packingprice);
        }
 
        String pro = entity.getPro();
        if (pro != null) {
            stmt.bindString(30, pro);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(31, city);
        }
 
        String district = entity.getDistrict();
        if (district != null) {
            stmt.bindString(32, district);
        }
 
        String street = entity.getStreet();
        if (street != null) {
            stmt.bindString(33, street);
        }
 
        String houseNumber = entity.getHouseNumber();
        if (houseNumber != null) {
            stmt.bindString(34, houseNumber);
        }
        stmt.bindDouble(35, entity.getLng());
        stmt.bindDouble(36, entity.getLat());
 
        String registerDate = entity.getRegisterDate();
        if (registerDate != null) {
            stmt.bindString(37, registerDate);
        }
 
        String shopUserDistance = entity.getShopUserDistance();
        if (shopUserDistance != null) {
            stmt.bindString(38, shopUserDistance);
        }
 
        String shopNotices = entity.getShopNotices();
        if (shopNotices != null) {
            stmt.bindString(39, shopNotices);
        }
 
        String shopTransportArea = entity.getShopTransportArea();
        if (shopTransportArea != null) {
            stmt.bindString(40, shopTransportArea);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Shop readEntity(Cursor cursor, int offset) {
        Shop entity = new Shop( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // writId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // special
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // shopCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // collectMoneyCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // shopName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // shopkeeperId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // shopkeeperName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // shopkeeperPhone
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // othershopnum
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // selfproductnum
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // shopNumber
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // telePhone
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // shopImage
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // classId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // className
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // startDate
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // endDate
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // status
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // bookingOrder
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // lineConsume
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // togetherTable
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // autoOrder
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // business
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // appDisplay
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // cod
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // distance
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // deliveryFee
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // packingprice
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // pro
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // city
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // district
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // street
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // houseNumber
            cursor.getDouble(offset + 34), // lng
            cursor.getDouble(offset + 35), // lat
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // registerDate
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // shopUserDistance
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // shopNotices
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39) // shopTransportArea
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Shop entity, int offset) {
        entity.setWritId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSpecial(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShopCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCollectMoneyCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setShopName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setShopkeeperId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setShopkeeperName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setShopkeeperPhone(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOthershopnum(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSelfproductnum(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setShopNumber(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTelePhone(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setShopImage(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setClassId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setClassName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setStartDate(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setEndDate(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setStatus(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setBookingOrder(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setLineConsume(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setTogetherTable(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setAutoOrder(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setBusiness(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setAppDisplay(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setCod(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setDistance(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setDeliveryFee(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setPackingprice(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setPro(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setCity(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setDistrict(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setStreet(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setHouseNumber(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setLng(cursor.getDouble(offset + 34));
        entity.setLat(cursor.getDouble(offset + 35));
        entity.setRegisterDate(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setShopUserDistance(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setShopNotices(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setShopTransportArea(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Shop entity, long rowId) {
        entity.setWritId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Shop entity) {
        if(entity != null) {
            return entity.getWritId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Shop entity) {
        return entity.getWritId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
